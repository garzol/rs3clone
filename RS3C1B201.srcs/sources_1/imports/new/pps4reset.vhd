----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 24.02.2024 22:28:01
-- Design Name: 
-- Module Name: pps4reset - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- Management of reset. PO is input reset to 11660. Active high. Must be held high for 10ms min.
--                      SPO is generated by 11660 to reset its periph
--                      it's a 30ms active high signal
--                      SPO is sync'd with phi2
--
-- /!\ It is set to 30us for test at the moment
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
library UNISIM;
use UNISIM.VComponents.all;

use work.common.all;
use work.libpps4.all;
use work.liberr.all;    -- list of error codes
use work.libfram.all;    -- list of error codes

entity pps4_reset is
    Port ( 
           hiclk       : in     STD_LOGIC;
           po          : in     std_logic; --manual reset from extern
           spo         : out    STD_LOGIC; --pps4 generated reset to control periph reset
           pps4_phi    : in     pps4_ph_type);
end pps4_reset;

architecture Behavioral of pps4_reset is

--reset active high. High at reset
signal  SPO_int :  STD_LOGIC := '1';

begin

    spo <= SPO_int;
    
    process(hiclk)
        constant    clength_spo    : integer := 6;    -- 6*5us=>30us for test
                                                      -- to be changed into 30ms in the end
        constant    clength_po     : integer := 2000; -- 10ms
        variable    lastpps4_phi   : pps4_ph_type := idlexx;
        variable    reset_delayer  : integer range 0 to clength_spo+1 := 6;
        variable    po_detector    : integer range 0 to clength_po+1  := 0;
    begin
        if rising_edge(hiclk) then   
            
            if lastpps4_phi /= pps4_phi then
                case pps4_phi is
                    when phi2    =>
                        if po = '1' then                            
                            po_detector := po_detector + 1;
                        else
                            po_detector := 0; 
                        end if;

                        if po_detector >= clength_po then
                            po_detector := clength_po;
                            reset_delayer := clength_spo;
                        end if;
                                                    
                        if reset_delayer = 0 then
                            SPO_int <= '0';
                        else
                            SPO_int <= '1';
                            reset_delayer := reset_delayer - 1;
                        end if;
                    when others  =>
                        null;
                end case;
            end if;
            lastpps4_phi := pps4_phi;
        end if;   
    end process;

end Behavioral;
